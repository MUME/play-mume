/*! For license information please see decafmud.telopt.gmcp.js.LICENSE.txt */
!function(t){var i=t.TN,n=function(t){this.decaf=t,this.decaf.gmcp=this};n.prototype.pingDelay=60,n.prototype.pingAverage=0,n.prototype.pingCount=0,n.prototype.pingWhen=void 0,n.prototype.pingTimer=void 0,n.prototype.sendGMCP=function(t,n){var e="";void 0!==n&&(e=" "+(e=JSON.stringify([n])).substr(1,e.length-2)),this.decaf.sendIAC(i.IAC+i.SB+i.GMCP+t+e+i.IAC+i.SE)},n.prototype._wont=n.prototype.disconnect=function(){clearTimeout(this.pingTimer),this.pingAverage=0,this.pingCount=0},n.prototype._will=function(){var i=this;setTimeout(function(){i.sendGMCP("Core.Hello",{client:"DecafMUD",version:t.version.toString()})},0),this.pingTimer=setTimeout(function(){i.ping()},1e3*this.pingDelay)},n.prototype.ping=function(){var t=void 0;this.pingCount>0&&(t=this.pingAverage),this.sendGMCP("Core.Ping",t),this.pingWhen=new Date;var i=this;this.pingTimer=setTimeout(function(){i.ping()},1e3*this.pingDelay)},n.prototype._sb=function(t){var i,n,e=t.search(/[^A-Za-z0-9._]/),o=!1;if(-1!==e?(i=t.substr(0,e),e+1!==t.length&&(n=JSON.parse("["+t.substr(e+1)+"]")[0])):i=t,0!==i.length){void 0!==n&&"console"in window&&console.groupCollapsed?(console.groupCollapsed("DecafMUD["+this.decaf.id+'] RCVD IAC SB GMCP "'+i+'" ... IAC SE'),console.dir(n),console.groupEnd("DecafMUD["+this.decaf.id+'] RCVD IAC SB GMCP "'+i+'" ... IAC SE')):o=!0;var s=this.getFunction(i);return s&&s.call(this,n),o}},n.prototype.getFunction=function(t){for(var i=t.split("."),n=this.packages;i.length>0;){var e=i.shift();if(void 0===n[e])return;n=n[e]}if("function"==typeof n)return n},n.prototype.packages={},n.prototype.packages.Core={" version":1,Ping:function(t){var i=new Date-this.pingWhen;this.pingCount++,this.pingAverage=Math.ceil((i+this.pingAverage*(this.pingCount-1))/this.pingCount),console.debug("PING: {0}ms over {1} pings".tr(this.decaf,this.pingAverage,this.pingCount))},Goodbye:function(t){this.decaf.debugString("Reason for disconnect: {0}".tr(this.decaf,t))}},t.plugins.Telopt[i.GMCP]=n}(DecafMUD);